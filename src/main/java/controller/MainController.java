package controller;

import database.Loader;
import models.User;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.File;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;

public class MainController extends TelegramLongPollingBot{
    private final ArrayList<MainMenu> mainMenus;
    private final Thread timeoutThread;

    private MainMenuEstate mainMenuEstate;

    public MainController() {
        this.mainMenus = new ArrayList<>();
        this.mainMenuEstate = MainMenuEstate.MAIN_MENU;
        this.timeoutThread = new Thread(new Runnable() {
            @Override
            public void run() {
                checkChatsForTimeOut();
            }
        });

        timeoutThread.start();
    }

    @Override
    public String getBotUsername() {
        return "moharam_fin_bot";
    }

    @Override
    public String getBotToken() {
        return "5572811468:AAHCDhD8K0v-03LwMLLl2hEj-DBY_w10qxQ";
    }

    @Override
    public void onUpdateReceived(Update update) {
//        if (update.getMessage().getText() == null || update.getMessage().getText() == ""){
//            return;
//        }
        (new Thread(() -> {
            long chatID = update.getMessage().getChatId();
            String username = update.getMessage().getFrom().getUserName();
            MainMenu mainMenu = getChat(chatID);
            if (mainMenu != null){
                System.out.println("\nonline chat");
                if (mainMenu.isHasActiveSession()){
                    SendMessage sendMessage = new SendMessage(String.valueOf(update.getMessage().getChatId()), "شما یک درخواست در جریان دارید.");
                    try {
                        sendMessageToUser(sendMessage);
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    return;
                }
                mainMenu.handleNewUpdate(update);
            } else
            if (Loader.loadUser(update.getMessage().getFrom().getId()) != null) {
                System.out.println("\nsaved chat");
                MainMenu newMainMenu = new MainMenu(MainController.this, chatID, Loader.loadUser(update.getMessage().getFrom().getId()), mainMenuEstate);
                newMainMenu.setEstate(MainMenuEstate.MAIN_MENU);
                mainMenus.add(newMainMenu);
                newMainMenu.handleNewUpdate(update);
            }else
            {
                System.out.println("\nnew user");
                MainMenu newMainMenu = new MainMenu(MainController.this, chatID, new User(update.getMessage().getFrom().getId(), null, username, null, null));
                mainMenus.add(newMainMenu);
                newMainMenu.handleNewUpdate(update);
            }
        })).start();
    }

    public synchronized void sendMessageToUser(Object object) throws TelegramApiException {
        if (object.getClass() == SendMessage.class){
            ((SendMessage) object).setText(((SendMessage) object).getText() + "\n\n---------------------------------------\nGenerated By @moharam_fin_bot");
            execute((SendMessage) object);
        } else
        if (object.getClass() == SendPhoto.class){
            ((SendPhoto) object).setCaption(((SendPhoto) object).getCaption() + "\n\n---------------------------------------\nGenerated By @moharam_fin_bot");
            execute((SendPhoto) object);
        } else
        if (object.getClass() == SendDocument.class){
            ((SendDocument) object).setCaption(((SendDocument) object).getCaption() + "\n\n---------------------------------------\nGenerated By @moharam_fin_bot");
            execute((SendDocument) object);
        }
    }

    public MainMenuEstate getEstate() {
        return mainMenuEstate;
    }

    public void setEstate(MainMenuEstate mainMenuEstate) {
        this.mainMenuEstate = mainMenuEstate;
    }

    public ArrayList<MainMenu> getChats() {
        return mainMenus;
    }

    public MainMenu getChat(long chatID){
        for (MainMenu mainMenu : mainMenus){
            if (mainMenu.getChatID() == chatID){
                return mainMenu;
            }
        }

        return null;
    }

    public MainMenu getChat(String username){
        for (MainMenu mainMenu : mainMenus){
            if (Objects.equals(mainMenu.getPerson().getUsername(), username)){
                return mainMenu;
            }
        }

        return null;
    }

    private void checkChatsForTimeOut(){
        while (true){
            LocalDateTime nowTime = LocalDateTime.now();
            ArrayList<MainMenu> timeOuts = new ArrayList<>();
            for (MainMenu chat : mainMenus) {
                LocalDateTime lastActionTime = chat.getLastActionTime();
                LocalDateTime from = LocalDateTime.of(lastActionTime.getYear(), lastActionTime.getDayOfMonth(), lastActionTime.getDayOfMonth(),
                        lastActionTime.getHour(), lastActionTime.getMinute(), lastActionTime.getSecond());
                LocalDateTime to = LocalDateTime.of(nowTime.getYear(), nowTime.getDayOfMonth(), nowTime.getDayOfMonth(),
                        nowTime.getHour(), nowTime.getMinute(), nowTime.getSecond());
                Duration duration = Duration.between(from, to);
                if (duration.getSeconds() > 60) {
                    timeOuts.add(chat);
                }
            }
            for (MainMenu timeOutedChat : timeOuts) {
                if (timeOutedChat.getEstate() != MainMenuEstate.MAIN_MENU){
                    SendMessage sendMessage = new SendMessage(String.valueOf(timeOutedChat.getChatID()), "شما به مدت حدودا یک ساعت درخواست جدیدی ثبت نکرده‌اید، به منظور صرفه‌جویی در منابع به منوی اصلی هدایت می‌شوید، اگر در حال انجام کاری بوده‌اید و آن را ثبت نکرده‌اید، باید مجددا از اول آن را انجام دهید و چیزی در سیستم ثبت نشده است.");
                    try {
                        sendMessageToUser(sendMessage);
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    timeOutedChat.showMainMenu(null);
                }
                System.out.println("\nRemoved: " + timeOutedChat.getUser().getUsername());
                mainMenus.remove(timeOutedChat);
            }

            try {
                Thread.sleep(60000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
